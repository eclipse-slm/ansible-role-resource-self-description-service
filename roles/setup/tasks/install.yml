---
- name: Set Download and binary name
  ansible.builtin.include_tasks: helper/set_download_url_and_binary.yml

- block:
  - name: "Check if group 'docker' exists"
    ansible.builtin.getent:
      database: group
      key: docker
    register: docker_group
  - name: "Create '{{ username }}' User and add to group docker (if exists)"
    ansible.builtin.user:
      name: "{{ username }}"
      groups: "{{ 'docker' if not docker_group.failed else '' }}"
      append: yes

- block:
  - name: "Find installed OpenJDK versions < version 21"
    ansible.builtin.shell: |
      dpkg -l | awk '/openjdk-[0-9]+/ { match($2, /openjdk-([0-9]+)/, a); if (a[1] < 21) print $2 }'
    register: openjdk_old_packages
  - name: "Remove old OpenJDK versions < version 21"
    ansible.builtin.apt:
      name: "{{ item }}"
      state: absent
      purge: yes
    loop: "{{ openjdk_old_packages.stdout_lines }}"
    when: openjdk_old_packages.stdout != ""
  - name: "Install OpenJDK version 21"
    ansible.builtin.apt:
      name: openjdk-21-jdk
      state: present
      update_cache: yes

- block:
  - name: "Check download destination"
    ansible.builtin.stat:
      path: "{{ install_path }}"
    register: stat_download_folder
  - name: "Create a download destination at {{ install_path }}"
    ansible.builtin.file:
      path: "{{ install_path }}"
      state: directory
      owner: "{{ username }}"
      mode: '0755'
    when: stat_download_folder.stat.exists == false

- name: "Configure Ubuntu Guest"
  ansible.builtin.include_tasks: helper/configure_ubuntu.yml
  when: ansible_os_family == "Debian"

- name: "Download resource-self-description-service in version {{ resource_self_description_service_version }}"
  ansible.builtin.get_url:
    url: "{{ download_url }}"
    dest: "{{ install_executable_path }}"
    owner: "{{ username }}"

- name: "Change owner of folder {{ install_path }}"
  ansible.builtin.file:
    path: "{{ install_path }}"
    owner: "{{ username }}"
    recurse: yes

- name: "Copy service file"
  ansible.builtin.template:
    src: resource-self-description-service.service.j2
    dest: /etc/systemd/system/resource-self-description-service.service
    force: yes

# iptables -A INPUT -p tcp --dport {{ port }} -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
- name: "Add rule for port {{ port }}"
  ansible.builtin.iptables:
    action: append
    chain: INPUT
    protocol: tcp
    destination_port: "{{ port }}"
    ctstate: ["NEW", "ESTABLISHED"]
    match: ["conntrack"]
    jump: "ACCEPT"
  changed_when: false

- name: "Restart firewalld service (RedHat)"
  ansible.builtin.systemd:
    state: restarted
    daemon_reload: yes
    name: firewalld
  when: ansible_os_family == "RedHat"
  changed_when: false

- name: "customize /etc/hosts"
  become: yes
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: "{{ item.ip }} {{ item.name }}"
    state: present
    create: yes
  loop:
    - { ip: "{{ slm_ip }}", name: "{{ slm_hostname }}" }

- name: "Get and trust SLM root CA certificate"
  ansible.builtin.include_tasks: vault/get_and_trust_ca.yml
  vars:
    vault_url: "{{ lookup('env', 'VAULT_URL') }}"
    vault_token: "{{ lookup('env', 'VAULT_TOKEN') }}"
    pki_name: "pki_root_slm"

- ansible.builtin.include_tasks: vault/add_certificate.yml
  vars:
    _vault_url: "{{ VAULT_URL }}"
    _vault_approle_role_id: "{{ VAULT_APPROLE_ROLE_ID }}"
    _vault_approle_secret_id: "{{ VAULT_APPROLE_SECRET_ID }}"
    _resource_id: "{{ RESOURCE_ID }}"
    _pki_name: "pki_int_resource-{{ RESOURCE_ID }}"
    _common_name: "{{ inventory_hostname }}"
    _ip_sans : "{{ inventory_hostname }}"
    _folder: "{{ install_path }}/certs"

- name: "Start resource-self-description-service service"
  ansible.builtin.systemd:
    state: started
    daemon_reload: yes
    name: resource-self-description-service