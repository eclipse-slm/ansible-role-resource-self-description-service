- name: "Assert inputs of 'vault | add_certificate.yml'"
  assert:
    that:
      - (vault_url is defined) and (vault_url|length > 0)
      - (role_id is defined) and (role_id|length > 0)
      - (secret_id is defined) and (secret_id|length > 0)
      - (resource_id is defined) and (resource_id|length > 0)
      - (ansible_default_ipv4.address is defined) and (ansible_default_ipv4.address|length > 0)
      - (folder is defined) and (folder | length > 0)

    fail_msg: "Variable must be defined and not empty"


- name: "Login to Vault"
  uri:
    url: "{{ vault_url }}/v1/auth/approle/login"
    validate_certs: no
    method: POST
    status_code: 200, 204
    body_format: json
    body:
      role_id: "{{ role_id }}"
      secret_id: "{{ secret_id }}"
  register: login

- name: "Set fact"
  set_fact:
    _vault_token: "{{ login.json.auth.client_token }}"


- name: "Assert vault_token"
  assert:
    that:
      - (_vault_token is defined) and (_vault_token|length > 0)
    fail_msg: "Variable must be defined and not empty"

- name: "Set PKI name pki_int_{{ resource_id }}"
  set_fact:
    pki_int: "pki_int_{{ resource_id }}"

- name: "Create a role named {{ _role_name }} which allows subdomains."
  uri:
    url: "{{ vault_url }}/v1/{{ pki_int }}/issue/{{ resource_id }}"
    validate_certs: no
    method: POST
    headers:
      Authorization: "Bearer {{ _vault_token }}"
    status_code: 200, 204
    body_format: json
    body:
      common_name: "{{ ansible_default_ipv4.address }}"
  register: cert

- name: "Create /etc/slm/ssl/resource if it does not exist"
  ansible.builtin.file:
    path: "{{ folder }}"
    state: directory
    mode: '0755'

- name: "Store Key"
  template:
    src: "resource.key"
    dest: "{{ folder }}/{{ resource_id }}.key"

- name: "Store Key"
  template:
    src: "resource-CA.crt"
    dest: "{{ folder }}/ca.crt"

- name: "Store Key"
  template:
    src: "resource-Cert.crt"
    dest: "{{ folder }}/{{ resource_id }}.crt"

- name: "Import SSL certificate from {{ slm_host_name }} to a given cacerts keystore"
  community.general.java_cert:
    cert_url: "{{ slm_host_name }}"
    cert_port: 443
    keystore_path: /etc/ssl/certs/java/cacerts
    keystore_pass: changeit
    state: present
